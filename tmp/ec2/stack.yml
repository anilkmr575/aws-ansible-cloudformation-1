AWSTemplateFormatVersion: "2010-09-09"

Description: "Basic Stack"

Parameters:
  SubnetPrivate1:
    Type: String
    Default: "cf-subnet-private-1"
  SubnetPrivate2:
    Type: String
    Default: "cf-subnet-private-2"

Resources:
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 2
      HealthCheckType: EC2
      LaunchConfigurationName:
        Ref: LaunchConfiguration
      MaxSize: 2
      MinSize: 1
      VPCZoneIdentifier:
          - Fn::ImportValue:
              Fn::Sub: ${SubnetPrivate1}-subnet::id
          - Fn::ImportValue:
              Fn::Sub: ${SubnetPrivate2}-subnet::id

  ECSCluster:
    Type: AWS::ECS::Cluster

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - "AutoScalingGroup"
    Properties:
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: 2
      LoadBalancers:
        - ContainerName: "nginx"
          ContainerPort: 80
          LoadBalancerName:
            Ref: "LoadBalancer"
      Role:
        Ref: "IamRoleService"
      TaskDefinition:
        Ref: "ECSTaskDefinition"

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: "nginx"
          Essential: true
          Image: "nginx"
          Memory: 128
          Cpu: 1024
          PortMappings:
            - ContainerPort: 80
              HostPort: 80

  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: IamRoleInstance

#  IamRoleInstance:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Statement:
#          - Effect: "Allow"
#            Principal:
#              Service:
#                - "ec2.amazonaws.com"
#            Action:
#              - "sts:AssumeRole"
#      Path: "/"
#      Policies:
#        - PolicyName: "IamRoleInstance-ecs"
#          PolicyDocument:
#            Version: "2012-10-17"
#            Statement:
#              - Effect: "Allow"
#                Action:
#                  - "ecs:DeregisterContainerInstance"
#                  - "ecs:DiscoverPollEndpoint"
#                  - "ecs:Poll"
#                  - "ecs:RegisterContainerInstance"
#                  - "ecs:StartTelemetrySession"
#                  - "ecs:Submit*"
#                Resource: "*"
#        - PolicyName: "IamRoleInstance-logs"
#          PolicyDocument:
#            Version: "2012-10-17"
#            Statement:
#              - Effect: "Allow"
#                Action:
#                  - "logs:CreateLogStream"
#                  - "logs:PutLogEvents"
#                Resource:
#                  - "arn:aws:logs:*:*:*"
#        - PolicyName: "IamRoleInstance-ecr"
#          PolicyDocument:
#            Version: "2012-10-17"
#            Statement:
#              - Effect: "Allow"
#                Action:
#                  - "ecr:GetAuthorizationToken"
#                  - "ecr:BatchCheckLayerAvailability"
#                  - "ecr:GetDownloadUrlForLayer"
#                  - "ecr:BatchGetImage"
#                Resource: "*"

#  IamRoleService:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Statement:
#          - Effect: "Allow"
#            Principal:
#              Service:
#                - "ecs.amazonaws.com"
#            Action:
#              - "sts:AssumeRole"
#      Path: "/"
#      Policies:
#        - PolicyName: "IamRoleService-ecs"
#          PolicyDocument:
#            Version: "2012-10-17"
#            Statement:
#              - Effect: "Allow"
#                Action:
#                  - "ec2:AuthorizeSecurityGroupIngress"
#                  - "ec2:Describe*"
#                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
#                  - "elasticloadbalancing:Describe*"
#                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
#                Resource: "*"

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command:
                Fn::Join:
                  - ""
                  - - "#!/bin/bash\n"
                    - "echo ECS_CLUSTER="
                    - Ref: ECSCluster
                    - " >> /etc/ecs/ecs.config\n"
                    - "echo ECS_AVAILABLE_LOGGING_DRIVERS=[\\\"json-file\\\",\\\"awslogs\\\"] >> /etc/ecs/ecs.config"
                    - "echo '*/10 * * * * root docker rm -v $(docker ps -a -q) >> /var/log/messages 2>&1' >> /etc/cron.d/docker"
              files:
                /etc/cfn/cfn-hup.conf:
                  content:
                    Fn::Join:
                      - ""
                      - - "[main]\n"
                        - "stack="
                        - Ref: AWS::StackId
                        - "\n"
                        - "region="
                        - Ref: AWS::Region
                        - "\n"
                  mode: 000400
                  owner: root
                  group: root
                /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                  content:
                    Fn::Join:
                      - ""
                      - - "[cfn-auto-reloader-hook]\n"
                        - "triggers=post.update\n"
                        - "path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init\n"
                        - "action=/opt/aws/bin/cfn-init -v --stack "
                        - Ref: AWS::StackName
                        - " --resource LaunchConfiguration --region "
                        - Ref: AWS::Region
                        - "\n"
                        - "runas=root\n"
                  services:
                    sysvinit:
                      cfn-hup:
                        enabled: true
                        ensureRunning: true
                        files:
                          - "/etc/cfn/cfn-hup.conf"
                          - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile:
        Ref: IamInstanceProfile
      ImageId: ami-3fb6bc5b
      InstanceType: t2.micro
      KeyName: synaptology-administrator
      SecurityGroups:
        - Ref: SecurityGroupInstance
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - "#!/bin/bash -xe\n"
              - "yum update -y ecs-init\n"
              - "yum install -y aws-cfn-bootstrap\n"
              - "/opt/aws/bin/cfn-init -v --stack "
              - Ref: AWS::StackName
              - " --resource LaunchConfiguration --region "
              - Ref: AWS::Region
              - "\n"
              - "/opt/aws/bin/cfn-signal -e $? --stack "
              - Ref: AWS::StackName
              - " --resource AutoScalingGroup --region "
              - Ref: AWS::Region
              - "\n"

#  LoadBalancer:
#    Type: AWS::ElasticLoadBalancing::LoadBalancer
#    Properties:
#      CrossZone: true
#      Listeners:
#        - InstancePort: '80'
#          InstanceProtocol: 'HTTP'
#          LoadBalancerPort: '80'
#          Protocol: 'HTTP'
#      SecurityGroups:
#        - Ref: SecurityGroupLoadBalancer
#      Subnets:
#        - Fn::ImportValue: cf-subnet-public-1-subnet::id
#        - Fn::ImportValue: cf-subnet-public-2-subnet::id

#  SecurityGroupInstance:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: "Security Group for EC2 instance(s) - only allow traffic via the Load Balancer"
#      SecurityGroupIngress:
#        - FromPort: 80
#          IpProtocol: "tcp"
#          SourceSecurityGroupId:
#            Ref: SecurityGroupLoadBalancer
#          ToPort: 80
#      VpcId:
#        Fn::ImportValue: cf-vpc-vpc::id
#
#  SecurityGroupLoadBalancer:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: "Security Group for Load balancer"
#      SecurityGroupIngress:
#        - CidrIp: 0.0.0.0/0
#          FromPort: 80
#          IpProtocol: tcp
#          ToPort: 80
#      VpcId:
#        Fn::ImportValue: cf-vpc-vpc::id

