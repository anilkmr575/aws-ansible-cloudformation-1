AWSTemplateFormatVersion: "2010-09-09"

Description: "Launch Configuration"

Resources:
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: {{ item.asg_desired_capacity }}
      HealthCheckType: {{ item.asg_health_check_type }}
      LaunchConfigurationName:
        Ref: LaunchConfiguration
      MaxSize: {{ item.asg_max_size }}
      MinSize: {{ item.asg_min_size }}
      VPCZoneIdentifier:
{% for asg_vpc_zone_identifier in item.asg_vpc_zone_identifiers %}
        - Fn::ImportValue: {{ asg_vpc_zone_identifier }}-subnet::id
{% endfor %}

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command:
                Fn::Join:
                  - ""
                  - - "#!/bin/bash\n"
                    - "echo ECS_CLUSTER="
                    - Fn::ImportValue: {{ item.lc_cluster_stack_name }}-cluster::id
                    - " >> /etc/ecs/ecs.config\n"
                    - "echo ECS_AVAILABLE_LOGGING_DRIVERS=[\\\"json-file\\\",\\\"awslogs\\\"] >> /etc/ecs/ecs.config\n"
                    - "echo '*/10 * * * * root docker rm -v $(docker ps -a -q) >> /var/log/messages 2>&1' >> /etc/cron.d/docker"
              files:
                /etc/cfn/cfn-hup.conf:
                  content:
                    Fn::Join:
                      - ""
                      - - "[main]\n"
                        - "stack="
                        - Ref: AWS::StackId
                        - "\n"
                        - "region="
                        - Ref: AWS::Region
                        - "\n"
                  mode: 000400
                  owner: root
                  group: root
                /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                  content:
                    Fn::Join:
                      - ""
                      - - "[cfn-auto-reloader-hook]\n"
                        - "triggers=post.update\n"
                        - "path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init\n"
                        - "action=/opt/aws/bin/cfn-init -v --stack "
                        - Ref: AWS::StackName
                        - " --resource LaunchConfiguration --region "
                        - Ref: AWS::Region
                        - "\n"
                        - "runas=root\n"
                  services:
                    sysvinit:
                      cfn-hup:
                        enabled: true
                        ensureRunning: true
                        files:
                          - "/etc/cfn/cfn-hup.conf"
                          - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    Properties:
      AssociatePublicIpAddress: {{ item.lc_associate_public_ip_address }}
      IamInstanceProfile:
        Fn::ImportValue: {{ item.lc_iam_instance_profile_stack_name }}-instance::profile::id
      ImageId: {{ item.lc_image_id }}
      InstanceType: {{ item.lc_instance_type }}
{% if item.lc_key_name is defined %}
      KeyName: {{ item.lc_key_name }}
{% endif %}
      SecurityGroups:
{% for lc_security_group_stack_name in item.lc_security_group_stack_names %}
        - Fn::ImportValue: {{ lc_security_group_stack_name }}-security::group::id
{% endfor %}
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - "#!/bin/bash -xe\n"
              - "yum update -y ecs-init\n"
              - "yum install -y aws-cfn-bootstrap\n"
              - "/opt/aws/bin/cfn-init -v --stack "
              - Ref: AWS::StackName
              - " --resource LaunchConfiguration --region "
              - Ref: AWS::Region
              - "\n"
{% if item.lc_user_data_aws_cli is defined %}
              - "yum install -y aws-cli\n"
{% endif %}
{% if item.lc_user_data_hosted_zone_stack_name is defined %}
              - "HOSTED_ZONE_ID="
              - Fn::ImportValue: {{ item.lc_user_data_hosted_zone_stack_name }}-hosted::zone::id
              - "\n"
              - "AVAILABILITY_ZONE=$(curl http://169.254.169.254/latest/meta-data/placement/availability-zone)\n"
              - "IPV4=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\n"
              - "aws s3api get-object --bucket synaptology-templates --key upsert-resource-record-set.sh upsert-resource-record-set.sh\n"
              - "chmod 755 upsert-resource-record-set.sh\n"
              - "./upsert-resource-record-set.sh $AVAILABILITY_ZONE $IPV4 $HOSTED_ZONE_ID\n"
{% endif %}
              - "/opt/aws/bin/cfn-signal -e $? --stack "
              - Ref: AWS::StackName
              - " --resource AutoScalingGroup --region "
              - Ref: AWS::Region
              - "\n"